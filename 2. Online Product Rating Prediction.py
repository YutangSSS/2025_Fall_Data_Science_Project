# -*- coding: utf-8 -*-
"""693_MP2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vCAwpPayJEXEKflk0sXNb9gfsQ7JDo36

# Wish.com Product Sales Prediction

<div>
<img src="https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F4409738%2Fa89e55ba3a0204c78be0eb154c79a6a0%2FA21ADFF0-AB9D-44E7-ABE0-F2E91CB19E1D.jpeg?generation=1601161987220890&alt=media" width="600"/>
</div>

So in this assignment, you will be working with a tabular dataset. The dataset is not clean, and you will need some preprocessing depending on the models of your choice. The dataset is the wish.com product dataset. We collected the data combined with some available data. Some nosies are added to the dataset. The goal is to predict the product sales - in order to understand customer behaviors and factors contributing to the sales.

The tabular data comes with many columns. To better understand the problem, here is a visual explaination of the product:

<div>
  <img src="https://www.googleapis.com/download/storage/v1/b/kaggle-user-content/o/inbox%2F1488294%2F308810459ae5232399672ba3eef228ef%2Fannotated-search-results-wish-website.jpg?generation=1598785563117062&alt=media" width="800"/>
</div>

## Data Cleaning and Preprocessing

We have pre-processed the dataset during the first assignment. In this assignment, we will continue using the pre-processed dataset. You can download the pre-processed dataset on the assignment webpage. The dataset was produced following the steps outlined in the last assignment, and then saved using the `to_csv` function of the cleaned dataframe.
"""

# write the code here to import pandas and read the csv file  into a variable
# use the info function to inspect columns and the head function to inspect
# some samples
# (1 mark)

import pandas as pd

df=pd.read_csv('/content/a1_done.csv')

# There are still some columns that we didn't transform last time.
# So lets select only the numeric columns into a new dataframe, named `df_numeric`,
# using the `select_dtypes` function of the dataframe you have with 'number' argument.
# Then, use the info function again to inspect column types
# (hint: we also use the select_dtypes function when working on correlation heatmap)
# (1 mark)

df_numeric = df.select_dtypes(include=['number'])

df_numeric.info()

"""## Visualization - Exploration"""

# Scatter plot new_price vs new_units_sold
# (1 mark)
import matplotlib.pyplot as plt


plt.scatter(df_numeric['new_price'], df_numeric['new_units_sold'])
plt.title('Scatter Plot: new_price vs new_units_sold')
plt.xlabel('new_price')
plt.ylabel('new_units_sold')
plt.show()

"""Describe your observation of the plot

(double-click here to enter your answer)

(1 mark - open question, there is no correct/incorrect answer)

Answer: The new units sold more when the new price is 0, when it is the new price it sold less.

"""

# Histogram plot of rating column
# (1 mark)
plt.hist(df_numeric['rating'], bins=10, edgecolor='black')
plt.title('Histogram of Rating')
plt.xlabel('Rating')
plt.ylabel('Frequency')
plt.show()

# Box plot of rating column
# (1 mark)
plt.boxplot(df_numeric['rating'])
plt.title('Box Plot of Rating')
plt.ylabel('Rating')
plt.show()

"""Describe your observations of the two plots above

(double-click here to enter your answer)

(2 mark - open question, there is no correct/incorrect answer)

Answer:
Both histogram and box plot of rating showing the rising trend

"""

# create a correlation heatmap for the `df_numeric` dataframe
# hint: use `corr` function to calculate correlations, and then
# the `heatmap` function in seaborn package for visualization

# (2 marks)

import seaborn as sns
feature_correlations = df_numeric.corr()


plt.figure(figsize=(10, 8))  # Adjust the size of the plot as needed
sns.heatmap(feature_correlations, annot=True, fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap of df_numeric')
plt.show()

"""What does a correlation value of -1 means? What does a correlation value of 1 means? What does a correlation value of 0 means?

(double-click here to enter your answer)

(3 marks)

Answer: The correlation value of -1 means perfect negative correlation, value of 1 means perfect positive correlation,this implies no correlation

Assuming that we are going to predict the `new_units_sold` attribute, describe your observations of its correlation to the other features.

(double-click here to enter your answer)

(1 mark - open question, there is no correct/incorrect answer)

Answer:The correlation of the `new_units_sold` attribute is when it getting warm or cold it means from 1 to 0, less new units sold based on the number.

## Inductive Modeling
"""

# Now, lets start building models!
# First, we need a training and a testing set
# use the `train_test_split` function from sklearn
# to split your `df_numeric` dataframe.
# Use 20% of the data for testing.

# (2 marks)

from sklearn.model_selection import train_test_split

training_df, testing_df = train_test_split(df_numeric, test_size=0.2)
print(len(training_df),len(testing_df))

# @title Default title text
# inspect your training and testing dataframe size using the shape function

# (1 marks)
training_df.shape

testing_df.shape

# Now lets select features and target attribute
# Use rating, rating_count, uses_ad_boosts, countries_shipped_to attributes as features
# Use new_units_sold as target
# Prepare training features dataframe, testing features dataframe,
# training target, and testing target

# (2 marks)

training_features=training_df[['rating','rating_count','uses_ad_boosts','countries_shipped_to']]
training_target=training_df.new_units_sold
testing_features=testing_df[['rating','rating_count','uses_ad_boosts','countries_shipped_to']]
testing_target=testing_df.new_units_sold

# create an LinearRegression instance
# and use its `fit` function to train the model with
# training features and training target as argument

# (2 marks)
from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(training_features,training_target)

# Evaluate the trained model on the testing set:
# First, use the `predict` function of your trained model on testing features to obtain the predicted values
# Then, use the `mean_absolute_error` function to calcuate the difference between your predicted values
# and the testing target

# (2 marks)

from sklearn.metrics import mean_absolute_error
predicted_target = model.predict(testing_features)
mean_absolute_error(testing_target,predicted_target)

"""

## Meme competition !!!!!!

Please contribute your meme here: You can copy and past the meme directly in the comment box.

https://github.com/CISC-873/Information-2022/issues/4

## Reference:
https://www.kaggle.com/datasets/jmmvutu/summer-products-and-sales-in-ecommerce-wish
"""